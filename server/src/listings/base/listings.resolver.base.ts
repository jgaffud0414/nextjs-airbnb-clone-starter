/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateListingsArgs } from "./CreateListingsArgs";
import { UpdateListingsArgs } from "./UpdateListingsArgs";
import { DeleteListingsArgs } from "./DeleteListingsArgs";
import { ListingsCountArgs } from "./ListingsCountArgs";
import { ListingsFindManyArgs } from "./ListingsFindManyArgs";
import { ListingsFindUniqueArgs } from "./ListingsFindUniqueArgs";
import { Listings } from "./Listings";
import { TripFindManyArgs } from "../../trip/base/TripFindManyArgs";
import { Trip } from "../../trip/base/Trip";
import { Wishlist } from "../../wishlist/base/Wishlist";
import { ListingsService } from "../listings.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Listings)
export class ListingsResolverBase {
  constructor(
    protected readonly service: ListingsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Listings",
    action: "read",
    possession: "any",
  })
  async _listingsItemsMeta(
    @graphql.Args() args: ListingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Listings])
  @nestAccessControl.UseRoles({
    resource: "Listings",
    action: "read",
    possession: "any",
  })
  async listingsItems(
    @graphql.Args() args: ListingsFindManyArgs
  ): Promise<Listings[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Listings, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Listings",
    action: "read",
    possession: "own",
  })
  async listings(
    @graphql.Args() args: ListingsFindUniqueArgs
  ): Promise<Listings | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Listings)
  @nestAccessControl.UseRoles({
    resource: "Listings",
    action: "create",
    possession: "any",
  })
  async createListings(
    @graphql.Args() args: CreateListingsArgs
  ): Promise<Listings> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        wishlist: args.data.wishlist
          ? {
              connect: args.data.wishlist,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Listings)
  @nestAccessControl.UseRoles({
    resource: "Listings",
    action: "update",
    possession: "any",
  })
  async updateListings(
    @graphql.Args() args: UpdateListingsArgs
  ): Promise<Listings | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          wishlist: args.data.wishlist
            ? {
                connect: args.data.wishlist,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Listings)
  @nestAccessControl.UseRoles({
    resource: "Listings",
    action: "delete",
    possession: "any",
  })
  async deleteListings(
    @graphql.Args() args: DeleteListingsArgs
  ): Promise<Listings | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Trip], { name: "trips" })
  @nestAccessControl.UseRoles({
    resource: "Trip",
    action: "read",
    possession: "any",
  })
  async resolveFieldTrips(
    @graphql.Parent() parent: Listings,
    @graphql.Args() args: TripFindManyArgs
  ): Promise<Trip[]> {
    const results = await this.service.findTrips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wishlist, {
    nullable: true,
    name: "wishlist",
  })
  @nestAccessControl.UseRoles({
    resource: "Wishlist",
    action: "read",
    possession: "any",
  })
  async resolveFieldWishlist(
    @graphql.Parent() parent: Listings
  ): Promise<Wishlist | null> {
    const result = await this.service.getWishlist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
